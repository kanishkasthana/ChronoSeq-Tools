#CHANGE THESE BEFORE YOU RUN THE SCRIPT:
num_cores=12 #Number of Cores to Use for STAR alignment
starGenomeIndex="/home/kanishk/Temp/starGenomeIndex/" #Absolute Path for Genome Index generated by STAR
ref_seq="/home/kanishk/mixedHumanMouse/hg19_mm10_transgenes.fasta" #Absolute Path for Reference Genome used for Alignment
refFlat="/home/kanishk/mixedHumanMouse/hg19_mm10_transgenes.refFlat" #Absolute Path for RefFlat annotations file for your Genome
picard_path="/home/kanishk/picard.jar" #Absolute Path for Picard tools jar file. Version:2.23.9 used for the development of this Pipeline
dropseq_path="/home/kanishk/Drop-seq_tools-2.4.0/" #Absolute Path for Dropseq tools directory. Version 2.4.0 for the development of this Pipeline
chronoseq_path="/home/kanishk/chrono-seq-tools/" #Absolute Path for Chrono-seq tools directory with all the python scripts.

import subprocess
import shlex
import os
import sys
import argparse

#For writing output to the stdout in realtime
def write(*something):
    print(*something)
    sys.stdout.flush()
    
#User Inputs needed:            
sample_directory_path=""
FastQFileR1=""
FastQFileR2=""
sample_name=""

def parse_file(input_filename):
    if not os.path.isfile(input_filename):
        raise argparse.ArgumentTypeError("File does not exist. Please use a valid file path.")
    return(input_filename)

def parse_directory(input_directory_path):
    if not os.path.isdir(input_directory_path):
        raise argparse.ArgumentTypeError("This directory doesn't exit. Try another path or please create this directory before running again.")
    if input_directory_path[-1] == "/":
        return(input_directory_path[0:-1])
    else:
        return(input_directory_path)

parser=argparse.ArgumentParser(description="Script for Chrono-Seq Pipeline.")
parser.add_argument("READ1_FASTQ",help="Absolute path of .fastq.gz file for Read 1 of your Sample/Experiment", type=parse_file)
parser.add_argument("READ2_FASTQ",help="Absolute path of .fastq.gz file for Read 1 of your Sample/Experiment",type=parse_file)
parser.add_argument("SAMPLE_DIRECTORY_PATH",help="Please enter a Valid Absolute Path for Directory where all processed files will be stored. One directory for one sample please.",type=parse_directory)
parser.add_argument("SAMPLE_NAME",help="This string will be prefixed to most of the output files.",type=str)
args=parser.parse_args()
write(args)

sample_directory_path=args.SAMPLE_DIRECTORY_PATH
FastQFileR1=args.READ1_FASTQ
FastQFileR2=args.READ2_FASTQ
sample_name=args.SAMPLE_NAME

#This function will run a line directly on the command line and will wait for it to execute before going 
#to the next line
def bash(command):
    process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE)
    while True:
        out = process.stdout.readline().decode()
        if out == '' and process.poll() is not None:
            break
        if out:
            write(out.strip())

OutputFileName=sample_directory_path+"/"+sample_name+"_unaligned.bam"
    
#Merging Both Reads into a Single File:
bash("java -Xmx4g -jar "+picard_path+" FastqToSam F1="+FastQFileR1+" F2="+FastQFileR2+ " O="+OutputFileName+" SM="+sample_name)


def getNewFileName(previousFileName,additional_tag):
    newFileName=previousFileName.split('.')[0:-1]
    newFileName=".".join(newFileName)+additional_tag
    return(newFileName,previousFileName)

#Creating New Files with Tagged Read1 Values
#Cell Tag
OutputFileName,previousFileName=getNewFileName(OutputFileName,".tagged.Cell.bam")
summaryFileName=OutputFileName+".summary.txt"
bash(dropseq_path+"/TagBamWithReadSequenceExtended INPUT="+previousFileName+" OUTPUT="+OutputFileName+" SUMMARY="+summaryFileName+" BASE_RANGE=1-12 BASE_QUALITY=10 BARCODED_READ=1 DISCARD_READ=False TAG_NAME=XC NUM_BASES_BELOW_QUALITY=1")

#Molecular Tag
OutputFileName,previousFileName=getNewFileName(OutputFileName,".Molecular.bam")
summaryFileName=OutputFileName+".summary.txt"
bash(dropseq_path+"/TagBamWithReadSequenceExtended INPUT="+previousFileName+" OUTPUT="+OutputFileName+" SUMMARY="+summaryFileName+" BASE_RANGE=13-20 BASE_QUALITY=10 BARCODED_READ=1 DISCARD_READ=False TAG_NAME=XM NUM_BASES_BELOW_QUALITY=1")

#Time Tag
OutputFileName,previousFileName=getNewFileName(OutputFileName,".Time.bam")
summaryFileName=OutputFileName+".summary.txt"
bash(dropseq_path+"/TagBamWithReadSequenceExtended INPUT="+previousFileName+" OUTPUT="+OutputFileName+" SUMMARY="+summaryFileName+" BASE_RANGE=15-24 BASE_QUALITY=10 BARCODED_READ=1 DISCARD_READ=True TAG_NAME=YT NUM_BASES_BELOW_QUALITY=1")

#Filter Low Quality Reads
OutputFileName,previousFileName=getNewFileName(OutputFileName,".Filtered.bam")
bash(dropseq_path+"/FilterBam TAG_REJECT=XQ INPUT="+previousFileName+" OUTPUT="+OutputFileName)

#Trim Starting Sequence
OutputFileName,previousFileName=getNewFileName(OutputFileName,".Adapter_Trimmed.bam")
summaryFileName=OutputFileName+".adapter_trimming_report.txt"
bash(dropseq_path+"/TrimStartingSequence INPUT="+previousFileName+" OUTPUT="+OutputFileName+" OUTPUT_SUMMARY="+summaryFileName+" SEQUENCE=AAGCAGTGGTATCAACGCAGAGTGAATGGG  MISMATCHES=0  NUM_BASES=5")

#Trim PolyA Sequence
OutputFileName,previousFileName=getNewFileName(OutputFileName,".PolyA_Trimmed.bam")
summaryFileName=OutputFileName+".polyA_trimming_report.txt"
bash(dropseq_path+"/PolyATrimmer INPUT="+previousFileName+" OUTPUT="+OutputFileName+" OUTPUT_SUMMARY="+summaryFileName+" MISMATCHES=0  NUM_BASES=6")

#Preparing FastQ file for Alignment. STAR doesn't accept BAM files.
OutputFileName,previousFileName=getNewFileName(OutputFileName,".fastq")
bash("java -Xmx4g -jar "+picard_path+" SamToFastq INPUT="+previousFileName+" FASTQ="+OutputFileName)

unaligned_bam=previousFileName

#Aligning Reads using STAR aligner:
bash("STAR --runThreadN "+str(num_cores)+" --genomeDir "+starGenomeIndex+" --readFilesIn "+ OutputFileName+" --outFileNamePrefix star")

#Move all files generated by star to the correct directory if not already in the correct one
bash("mv ./star* "+sample_directory_path+"/")

previousFileName=sample_directory_path+"/starAligned.out.sam"
OutputFileName=sample_directory_path+"/"+sample_name+".aligned.sorted.bam"

#Sorting Aligned File
bash("java -Xmx4g -jar "+picard_path+" SortSam I="+previousFileName+" O="+OutputFileName+" SO=queryname")
OutputFileName,previousFileName=getNewFileName(OutputFileName,".merged.bam")

#Merging with unaligned BAM file to get back Tags
bash("java -Xmx4g -jar "+picard_path+" MergeBamAlignment REFERENCE_SEQUENCE="+ref_seq+" UNMAPPED_BAM="+unaligned_bam+" ALIGNED_BAM="+previousFileName+" OUTPUT="+OutputFileName+" INCLUDE_SECONDARY_ALIGNMENTS=false  PAIRED_RUN=false")

#Tagging Reads with Gene Functional information
OutputFileName,previousFileName=getNewFileName(OutputFileName,".tagged.bam")
bash(dropseq_path+"/TagReadWithGeneFunction INPUT="+previousFileName+" OUTPUT="+OutputFileName+" ANNOTATIONS_FILE="+refFlat)

#Correcting Substitution Errors
OutputFileName,previousFileName=getNewFileName(OutputFileName,".sub_corrected.bam")
bash("python "+chronoseq_path+"/CorrectSubstitutionErrors.py "+previousFileName+" "+OutputFileName)

#Correcting Synthesis Errors
OutputFileName,previousFileName=getNewFileName(OutputFileName,".syn_corrected.bam")
bash("python "+chronoseq_path+"/CorrectSynthesisErrors.py "+previousFileName+" "+OutputFileName)