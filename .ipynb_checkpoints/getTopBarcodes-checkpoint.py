#Author Kanishk Asthana kasthana@eng.ucsd.edu 
import matplotlib.pyplot as plt
import pandas as pd
import sys 
import argparse 
import os

#Default Values
filename=""
num_cells=500
export_plot=False
num_cell_to_export=0
export_data=False

def parse_bool(input_string):
    if input_string not in {'True','False'}:
        raise argparse.ArgumentTypeError("Value has to be True or False !")
    if input_string =='True':
        return True
    else:
        return False
    
def parse_file(input_filename):
    if not os.path.isfile(input_filename):
        raise argparse.ArgumentTypeError("File does not exist. Please use a valid file path.")
    return(input_filename)
    
parser=argparse.ArgumentParser(description="Script to get Top Barcodes for DGE creation")
parser.add_argument("FILENAME",help="Compressed file generated by getBarcodeCounts.py",type=parse_file)
parser.add_argument("OUTPUT_FILENAME",help="Please enter a valid path for the file with top Barcodes",type=str)
parser.add_argument("-np","--NUM_PLOT", help="Number of Cells to Plot for the Cumulative Barcode Plot, Default Value is 500",type=int)
parser.add_argument("-ne","--NUM_EXPORT",help="Number of Cells to Export for DGE creation.\n"+
                    "This should be determined from the knee in the plot generated by this script.\n"+
                    "If this argument is not specified no barcode list will be exported.\n"+
                    "Exported list will have the suffix top_barcode_list.txt added to the FILENAME used as input",type=int)
parser.add_argument("-e","--EXPORT_PLOT", help="Boolean Value for exporting plot. Set to False when exporting Barcode list. Default is False",type=parse_bool)

args=parser.parse_args()

filename=args.FILENAME
outFilename=args.OUTPUT_FILENAME

if args.NUM_PLOT is not None:
    num_cells=args.NUM_PLOT

if args.NUM_EXPORT is not None:
    export_data=True
    num_cell_to_export=args.NUM_EXPORT
    
export_plot=args.EXPORT_PLOT

barcodeDistribution=pd.read_table(filename,header=None)
cumulativeDistribution=barcodeDistribution[1].cumsum()/barcodeDistribution[1].sum()
if export_plot:
    plot=cumulativeDistribution[0:num_cells].plot(xlabel="sorted cell barcodes descending", ylabel="cumulative fraction of reads",ylim=(0,1),figsize=(8.0,8.0));
    fig=plot.get_figure();
    fig.savefig(outFilename+".barcodeplot.png",dpi=600)
    
if export_data is True:
    barcodeDistribution[0][0:num_cell_to_export].to_csv(outFilename,sep='\t',header=False,index=False)