#Author Kanishk Asthana kasthana@ucsd.edu

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statannot import add_stat_annotation
import os
from datetime import datetime,timedelta
import argparse
import sys

#Default Values
time_tags_file=""
dge_file=""

#For writing output to the stdout in realtime
def write(*something):
    print(*something)
    sys.stdout.flush()

def parse_file(input_filename):
    if not os.path.isfile(input_filename):
        raise argparse.ArgumentTypeError("File does not exist. Please use a valid file path.")
    return(input_filename)

parser=argparse.ArgumentParser(description="Script to Combine the DGE data and Time-Tags data into a Single Combined csv.gz File")
parser.add_argument("TIME_TAGS_FILE",help=" .time_tags.csv File Generated by GetTimeTags.py ", type=parse_file)
parser.add_argument("DGE_FILE",help="DGE File Generated by GetDGE.py using Drop-Seq Tools",type=parse_file)
args=parser.parse_args()
write(args)

time_tags_file=args.TIME_TAGS_FILE
dge_file=args.DGE_FILE

#Getting Full Path
time_tags_file=os.path.abspath(os.path.expanduser(time_tags_file))
dge_file=os.path.abspath(os.path.expanduser(dge_file))

print("Time Tags File Path: "+time_tags_file)
print("DGE File Path: "+dge_file)

script_start_time=datetime.now()

start_time=datetime.now()
write("Started Combining data at",start_time,".")

#Getting Prefix for New Filenames
newFileName=dge_file.split('.')[0:-2]
newFileName=".".join(newFileName)+".time_tags"

write("Reading Time-Tags File: "+time_tags_file)
# Reading in Time Tags data and removing Time Tags where a Collision is detected. Dropping individual counts columns.
timetagdf = pd.read_table(time_tags_file, sep = "\t")
timetagdf=timetagdf[~timetagdf["FINAL TIME TAG"].str.contains("Collision Detected")] #Removing Cell Barcodes with Collision in Time-Tag Determination
timetagdf=timetagdf.iloc[:,0:3]
timetagdf=timetagdf.drop("TIME TAG COUNTS", axis=1)

write("Converting Text Time-Tags to Integer Values: ")
#To Convert Text Values to Integer Time-Tag Values
time_tags_dict={
 "SEQ1_TTGG":1,
 "SEQ2_CCTT":2,
 "SEQ3_GGAA":3,
 "SEQ4_TTCC":4,
 "SEQ5_TTAA":5,
 "SEQ6_TTTT":6,
 "SEQ7_CCAA":7,
 "SEQ8_CCGG":8,
 "SEQ9_CCCC":9,
 "SEQ10_GGTT":10,
 "SEQ11_GGCC":11,
 "SEQ12_GGGG":12
}

write(time_tags_dict)

#Replace Text Values with Integer Values
timetagdf["FINAL TIME TAG"]=timetagdf["FINAL TIME TAG"].replace(time_tags_dict)

write("Reading DGE Data from File: "+dge_file)

#Reading in Digital Gene Expression Matrix. Taking Transpose and resetting the index. 
control_df=pd.read_table(dge_file).T
control_df=control_df.reset_index()
control_df.iloc[0,0]="CELL BARCODES"
control_df.columns=control_df.iloc[0]
control_df=control_df.drop(index=0)
control_df["COUNTS"]=control_df.iloc[:,1:].sum(axis=1)

#Combining the Time Tags with DGE Information
write("Merging with Time-Tags Data.")
combinedDGE=control_df.merge(timetagdf, on="CELL BARCODES")

write("Generating Time-Tags Counts Statistics.")
time_tag_counts=combinedDGE.groupby("FINAL TIME TAG").count().iloc[:,0:1]
time_tag_counts.to_csv(newFileName+".time_tag_counts_summary.csv",index=False)


#Sorting by Final Time Tag
combinedDGE=combinedDGE.sort_values("FINAL TIME TAG")

write("Generating Bar Plot for Average number of Unique Transcripts captured per Time-Tagged Bead.")
#Plotting Average Unique Counts Detected per Cell Barcode for Each Time Tag
sns.set_theme(style="whitegrid")
ax = sns.barplot(x="FINAL TIME TAG", y="COUNTS", data=combinedDGE)
ax.set(ylabel="Mean UMI/Time-Tag-Bead")
ax.set(xlabel="Time Tag Number")
fig=ax.get_figure()
fig.savefig(newFileName+".Tags_counts_bar_plot.png",dpi=600)

#Exporting Data
write("Exporting Combined Data to Compressed CSV File.")
combinedDGE.to_csv(newFileName+".csv.gz",index=False,compression="gzip")

write("Total Execution Time:",datetime.now()-script_start_time)